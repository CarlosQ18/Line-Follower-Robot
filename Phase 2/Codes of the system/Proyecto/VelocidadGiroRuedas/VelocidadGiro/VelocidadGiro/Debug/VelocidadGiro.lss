
VelocidadGiro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ae  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a4  00000000  00000000  00000992  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000298  00000000  00000000  00001036  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000012d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000392  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  000016ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>
#include "SpeedModule.h"

int main(void)
{
	ConfigPWM();
  80:	0e 94 53 00 	call	0xa6	; 0xa6 <ConfigPWM>
    while (1) 
    {
		VelocidadGiro(0,230);
  84:	66 ee       	ldi	r22, 0xE6	; 230
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	0e 94 66 00 	call	0xcc	; 0xcc <VelocidadGiro>
		VelocidadGiro(100,230);
  8c:	66 ee       	ldi	r22, 0xE6	; 230
  8e:	84 e6       	ldi	r24, 0x64	; 100
  90:	0e 94 66 00 	call	0xcc	; 0xcc <VelocidadGiro>
		VelocidadGiro(0,230);
  94:	66 ee       	ldi	r22, 0xE6	; 230
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 66 00 	call	0xcc	; 0xcc <VelocidadGiro>
		VelocidadGiro(255,230);
  9c:	66 ee       	ldi	r22, 0xE6	; 230
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	0e 94 66 00 	call	0xcc	; 0xcc <VelocidadGiro>
  a4:	ef cf       	rjmp	.-34     	; 0x84 <main+0x4>

000000a6 <ConfigPWM>:
 *  Author: Carlos F. Quintero
 */ 
#include <avr/io.h>

void ConfigPWM(){
	DDRD |= (1<<5) | (1<<6); // Configura el puerto D5 y D6 como salidas de la señal PWM
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 66       	ori	r24, 0x60	; 96
  aa:	8a b9       	out	0x0a, r24	; 10
	
	TCCR0A |= (1 << WGM01) | (1 << WGM00); // Configuració de Fast PWM
  ac:	84 b5       	in	r24, 0x24	; 36
  ae:	83 60       	ori	r24, 0x03	; 3
  b0:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A1); // Non inverting mode del PWM del puerto OC0A (D6)
  b2:	84 b5       	in	r24, 0x24	; 36
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0B1); // Non inverting mode del PWM del puerto OC0B (D5)
  b8:	84 b5       	in	r24, 0x24	; 36
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00); // No prescaling
  be:	85 b5       	in	r24, 0x25	; 37
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0x00;
  c4:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0x00;
  c6:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0x00;
  c8:	18 bc       	out	0x28, r1	; 40
  ca:	08 95       	ret

000000cc <VelocidadGiro>:

}

void VelocidadGiro(uint8_t VelIzq, uint8_t VelDer){
	OCR0A = VelIzq;
  cc:	87 bd       	out	0x27, r24	; 39
	OCR0B = VelDer;
  ce:	68 bd       	out	0x28, r22	; 40
  d0:	08 95       	ret

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
