
detecobjetos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e6  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bd  00000000  00000000  00000a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000320  00000000  00000000  000010cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000013ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b5  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000042  00000000  00000000  000017f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000183b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ObjetoAlFrente>:
#include <avr/io.h>
#include "do_mods.h"

int ObjetoAlFrente(unsigned char ofrente)
{
	if (PINC & ofrente)
  80:	96 b1       	in	r25, 0x06	; 6
  82:	89 23       	and	r24, r25
  84:	19 f0       	breq	.+6      	; 0x8c <ObjetoAlFrente+0xc>
		return 0;
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	08 95       	ret
	else
		return 1;
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	90 e0       	ldi	r25, 0x00	; 0
}
  90:	08 95       	ret

00000092 <ObjetoAlLado>:
	
/////////////////////////////////////////////////////////////////////////////////////////////////////////
int ObjetoAlLado(unsigned char olado)
{
	if (PINC & olado)
  92:	96 b1       	in	r25, 0x06	; 6
  94:	89 23       	and	r24, r25
  96:	19 f0       	breq	.+6      	; 0x9e <ObjetoAlLado+0xc>
		return 0;
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	08 95       	ret
	else
		return 1;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
}
  a2:	08 95       	ret

000000a4 <main>:

{
    unsigned char Ofrente = 0x01; //mascara para la detección de un objeto al frente del robot.
	unsigned char Olateral = 0x02; //mascara para la detección de un objeto al lado del robot.
	
	DDRC &= ~(1<<0) & ~(1<<1); // Configura el puerto C0 y C1 como entradas
  a4:	87 b1       	in	r24, 0x07	; 7
  a6:	8c 7f       	andi	r24, 0xFC	; 252
  a8:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<0) | (1<<1); // Configura el puerto B0 Y B1 como salidas
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	83 60       	ori	r24, 0x03	; 3
  ae:	84 b9       	out	0x04, r24	; 4
				
    while (1) 
    {
		if( ObjetoAlFrente(Ofrente) && ObjetoAlLado(Olateral) ){
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 40 00 	call	0x80	; 0x80 <ObjetoAlFrente>
  b6:	89 2b       	or	r24, r25
  b8:	41 f0       	breq	.+16     	; 0xca <main+0x26>
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	0e 94 49 00 	call	0x92	; 0x92 <ObjetoAlLado>
  c0:	89 2b       	or	r24, r25
  c2:	19 f0       	breq	.+6      	; 0xca <main+0x26>
			PORTB = (1 << 0) | ( 1 << 1);
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	85 b9       	out	0x05, r24	; 5
  c8:	f3 cf       	rjmp	.-26     	; 0xb0 <main+0xc>
		}
		else if ( ObjetoAlFrente(Ofrente) && !ObjetoAlLado(Olateral) ){
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 40 00 	call	0x80	; 0x80 <ObjetoAlFrente>
  d0:	89 2b       	or	r24, r25
  d2:	61 f0       	breq	.+24     	; 0xec <main+0x48>
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	0e 94 49 00 	call	0x92	; 0x92 <ObjetoAlLado>
  da:	89 2b       	or	r24, r25
  dc:	39 f4       	brne	.+14     	; 0xec <main+0x48>
			PORTB |= ( 1 << 0 );
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~( 1 << 1 );
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	8d 7f       	andi	r24, 0xFD	; 253
  e8:	85 b9       	out	0x05, r24	; 5
  ea:	e2 cf       	rjmp	.-60     	; 0xb0 <main+0xc>
		}
		else if ( !ObjetoAlFrente(Ofrente) && ObjetoAlLado(Olateral) ){
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	0e 94 40 00 	call	0x80	; 0x80 <ObjetoAlFrente>
  f2:	89 2b       	or	r24, r25
  f4:	61 f4       	brne	.+24     	; 0x10e <main+0x6a>
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	0e 94 49 00 	call	0x92	; 0x92 <ObjetoAlLado>
  fc:	89 2b       	or	r24, r25
  fe:	39 f0       	breq	.+14     	; 0x10e <main+0x6a>
			PORTB &= ~( 1 << 0 );
 100:	85 b1       	in	r24, 0x05	; 5
 102:	8e 7f       	andi	r24, 0xFE	; 254
 104:	85 b9       	out	0x05, r24	; 5
			PORTB |=  ( 1 << 1 );
 106:	85 b1       	in	r24, 0x05	; 5
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	85 b9       	out	0x05, r24	; 5
 10c:	d1 cf       	rjmp	.-94     	; 0xb0 <main+0xc>
		}
		else{
			PORTB &= ~( 1 << 0 ) & ~( 1 << 1 );
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	8c 7f       	andi	r24, 0xFC	; 252
 112:	85 b9       	out	0x05, r24	; 5
 114:	cd cf       	rjmp	.-102    	; 0xb0 <main+0xc>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
